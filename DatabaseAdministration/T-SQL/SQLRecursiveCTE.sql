-- Begin a transaction block so changes can be rolled back later
begin tran

-- Alter the table 'tblEmployee' to add a new column named 'Manager' of type int
alter table tblEmployee
add Manager int

-- 'go' signals the end of the batch and executes the previous statements
go

-- Update the 'Manager' column with a calculated value based on EmployeeNumber
update tblEmployee
set Manager = ((EmployeeNumber-123)/10)+123
-- Only update rows where EmployeeNumber is greater than 123
where EmployeeNumber > 123;

-- Define a recursive Common Table Expression (CTE) named 'myTable'
with myTable as
(
    -- Anchor member: Select employees who have no manager (top-level bosses)
    select EmployeeNumber, EmployeeFirstName, EmployeeLastName, 0 as BossLevel
    from tblEmployee
    where Manager is null

    UNION ALL  -- Combine anchor and recursive member results, allowing duplicates

    -- Recursive member: Select employees who report to managers found in previous step
    select E.EmployeeNumber, E.EmployeeFirstName, E.EmployeeLastName, myTable.BossLevel + 1
    from tblEmployee as E
    join myTable on E.Manager = myTable.EmployeeNumber
)
-- Select all rows generated by the recursive CTE, showing hierarchy levels
select * from myTable

-- Roll back the transaction to undo all previous changes
rollback tran
