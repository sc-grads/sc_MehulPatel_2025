--GUIDs
-- Declare a variable @newvalue of type uniqueidentifier (GUID)
declare @newvalue as uniqueidentifier --GUID

-- Set @newvalue to a new random GUID generated by the NEWID() function
SET @newvalue = NEWID()

-- Select the generated GUID, aliasing the column as TheNewID
SELECT @newvalue as TheNewID
GO

-- Declare and set a variable @randomnumbergenerator to an integer based on the current time in milliseconds, seconds, minutes, and hours
declare @randomnumbergenerator int =
DATEPART(MILLISECOND,SYSDATETIME())+1000*(DATEPART(SECOND,SYSDATETIME())
+60*(DATEPART(MINUTE,SYSDATETIME())+60*DATEPART(HOUR,SYSDATETIME())))

-- Use the integer @randomnumbergenerator as a seed for the RAND() function to generate a pseudo-random number between 0 and 1
SELECT RAND(@randomnumbergenerator) as RandomNumber;

-- Begin a transaction block
begin tran

-- Create a table named tblEmployee4 with two columns:
-- UniqueID: uniqueidentifier type with a default constraint that assigns a NEWID() value automatically
-- EmployeeNumber: int type with a unique constraint (no duplicate values allowed)
Create table tblEmployee4
(
    UniqueID uniqueidentifier CONSTRAINT df_tblEmployee4_UniqueID DEFAULT NEWID(),
    EmployeeNumber int CONSTRAINT uq_tblEmployee4_EmployeeNumber UNIQUE
)

-- Insert three rows into tblEmployee4 with EmployeeNumbers 1, 2, and 3
Insert into tblEmployee4(EmployeeNumber)
VALUES (1), (2), (3)

-- Select all rows from tblEmployee4 to display inserted data, including automatically generated UniqueIDs
select * from tblEmployee4

-- Roll back the transaction to undo table creation and inserts
rollback tran
GO

-- Declare a variable @newvalue of type uniqueidentifier again
declare @newvalue as uniqueidentifier

-- Set @newvalue to a new sequential GUID generated by the NEWSEQUENTIALID() function
SET @newvalue = NEWSEQUENTIALID()

-- Select the sequential GUID, aliasing the column as TheNewID
SELECT @newvalue as TheNewID
GO

-- Begin another transaction block
begin tran

-- Create the table tblEmployee4 again, but this time the UniqueID column uses NEWSEQUENTIALID() as the default instead of NEWID()
Create table tblEmployee4
(
    UniqueID uniqueidentifier CONSTRAINT df_tblEmployee4_UniqueID DEFAULT NEWSEQUENTIALID(),
    EmployeeNumber int CONSTRAINT uq_tblEmployee4_EmployeeNumber UNIQUE
)

-- Insert three rows into tblEmployee4 with EmployeeNumbers 1, 2, and 3
Insert into tblEmployee4(EmployeeNumber)
VALUES (1), (2), (3)

-- Select all rows from tblEmployee4 to show data, including sequential UniqueIDs
select * from tblEmployee4

-- Roll back the transaction to undo all changes
rollback tran
